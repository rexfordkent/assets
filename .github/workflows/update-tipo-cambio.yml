name: Actualizar Tipo de Cambio

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  update-rates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4
    
    - name: Obtener tipo de cambio via proxy services
      run: |
        cat > scraper.py << 'ENDOFSCRIPT'
        import requests
        from bs4 import BeautifulSoup
        import json
        import re
        from datetime import datetime
        import urllib3
        urllib3.disable_warnings()
        
        def get_sunat_via_proxy():
            """Obtener SUNAT usando servicios proxy gratuitos"""
            try:
                print("Intentando obtener SUNAT via proxies...")
                
                # Opcion 1: Usar AllOrigins (proxy CORS gratuito)
                proxy_urls = [
                    f"https://api.allorigins.win/raw?url=https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias",
                    f"https://corsproxy.io/?https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias",
                    f"https://proxy.cors.sh/https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias"
                ]
                
                for proxy_url in proxy_urls:
                    try:
                        print(f"Probando proxy: {proxy_url[:50]}...")
                        response = requests.get(proxy_url, timeout=20, verify=False)
                        
                        if response.status_code == 200 and len(response.text) > 1000:
                            html = response.text
                            
                            # Buscar valores de tipo de cambio
                            valores = re.findall(r'3\.\d{3}', html)
                            
                            if valores:
                                valores_float = [float(v) for v in valores if 3.4 <= float(v) <= 3.8]
                                valores_unicos = list(dict.fromkeys(valores_float))
                                
                                if valores_unicos:
                                    if len(valores_unicos) >= 2:
                                        compra = min(valores_unicos[0], valores_unicos[1])
                                        venta = max(valores_unicos[0], valores_unicos[1])
                                    else:
                                        compra = venta = valores_unicos[0]
                                    
                                    print(f"SUNAT via proxy: {compra}/{venta}")
                                    return {
                                        "compra": compra,
                                        "venta": venta,
                                        "fecha": datetime.now().strftime("%d/%m/%Y"),
                                        "fuente": "proxy_service"
                                    }
                    except Exception as e:
                        print(f"Error con proxy: {e}")
                        continue
                
                # Opcion 2: Usar ScraperAPI (tienen tier gratuito)
                # Necesitas registrarte en scraperapi.com para obtener una API key gratuita
                # api_key = "TU_API_KEY"  # Reemplazar con tu key
                # scraper_url = f"http://api.scraperapi.com?api_key={api_key}&url=https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias"
                
                # Opcion 3: Obtener de fuentes alternativas que publican el tipo de cambio
                alternative_sources = [
                    "https://cuantoestaeldolar.pe/",
                    "https://www.deperu.com/tipo_cambio/",
                    "https://tc.wego.pe/tipo-de-cambio-sunat-sbs"
                ]
                
                for source in alternative_sources:
                    try:
                        print(f"Probando fuente alternativa: {source}")
                        response = requests.get(source, timeout=10, headers={
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        })
                        
                        if response.status_code == 200:
                            html = response.text
                            
                            # Buscar menciones de SUNAT con valores
                            if 'SUNAT' in html or 'sunat' in html:
                                # Buscar valores cercanos a la palabra SUNAT
                                sunat_index = html.lower().find('sunat')
                                if sunat_index > 0:
                                    # Buscar valores en los proximos 500 caracteres
                                    snippet = html[sunat_index:sunat_index+500]
                                    valores = re.findall(r'3\.\d{3}', snippet)
                                    
                                    if valores:
                                        valores_float = [float(v) for v in valores if 3.4 <= float(v) <= 3.8]
                                        
                                        if valores_float:
                                            if len(valores_float) >= 2:
                                                compra = valores_float[0]
                                                venta = valores_float[1]
                                            else:
                                                compra = venta = valores_float[0]
                                            
                                            print(f"SUNAT desde {source}: {compra}/{venta}")
                                            return {
                                                "compra": compra,
                                                "venta": venta,
                                                "fecha": datetime.now().strftime("%d/%m/%Y"),
                                                "fuente": f"via_{source.split('/')[2]}"
                                            }
                    except Exception as e:
                        print(f"Error con fuente alternativa: {e}")
                        continue
                
            except Exception as e:
                print(f"Error general: {e}")
            
            return {"error": True, "message": "No se pudo obtener de SUNAT"}
        
        def get_sbs():
            """Obtener SBS directamente (este si funciona)"""
            try:
                print("Obteniendo SBS...")
                response = requests.get(
                    'https://www.sbs.gob.pe/app/pp/sistip_portal/paginas/publicacion/tipocambiopromedio.aspx',
                    headers={'User-Agent': 'Mozilla/5.0'},
                    verify=False,
                    timeout=30
                )
                
                if response.status_code == 200:
                    html = response.text
                    valores = re.findall(r'3\.\d{3}', html)
                    
                    if valores:
                        valores_float = [float(v) for v in valores if 3.4 <= float(v) <= 3.8]
                        valores_unicos = list(dict.fromkeys(valores_float))
                        
                        if len(valores_unicos) >= 2:
                            print(f"SBS: {valores_unicos[0]}/{valores_unicos[1]}")
                            return {
                                "compra": valores_unicos[0],
                                "venta": valores_unicos[1],
                                "fecha": datetime.now().strftime("%d/%m/%Y"),
                                "fuente": "web_direct"
                            }
                        elif len(valores_unicos) == 1:
                            return {
                                "compra": valores_unicos[0],
                                "venta": valores_unicos[0],
                                "fecha": datetime.now().strftime("%d/%m/%Y"),
                                "fuente": "web_direct"
                            }
            except Exception as e:
                print(f"Error SBS: {e}")
            
            return {"error": True, "message": "No se pudo obtener de SBS"}
        
        # Ejecutar
        print("=" * 60)
        print("OBTENIENDO TIPO DE CAMBIO")
        print("=" * 60)
        
        sunat_data = get_sunat_via_proxy()
        sbs_data = get_sbs()
        
        # Si SUNAT falla pero SBS funciona, usar SBS para ambos
        if sunat_data.get('error') and not sbs_data.get('error'):
            print("SUNAT fallo, usando valores de SBS para ambos")
            sunat_data = {
                "compra": sbs_data['compra'],
                "venta": sbs_data['venta'],
                "fecha": sbs_data['fecha'],
                "fuente": "sbs_mirror"
            }
        
        result = {
            "sunat": sunat_data,
            "sbs": sbs_data,
            "ultima_actualizacion": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        with open('tipo-cambio.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print("\n" + "=" * 60)
        print("RESULTADO FINAL:")
        print(f"SUNAT: {sunat_data}")
        print(f"SBS: {sbs_data}")
        print("=" * 60)
        ENDOFSCRIPT
        
        python scraper.py
    
    - name: Mostrar JSON
      run: cat tipo-cambio.json
    
    - name: Commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add tipo-cambio.json
        git commit -m "TC - $(date +'%d/%m/%Y %H:%M')" || echo "No changes"
        git push || echo "Nothing to push"
