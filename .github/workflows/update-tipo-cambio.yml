name: Actualizar Tipo de Cambio

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  update-rates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4
    
    - name: Scraping con endpoints correctos
      run: |
        cat > scraper.py << 'ENDOFSCRIPT'
        import requests
        from bs4 import BeautifulSoup
        import json
        import re
        from datetime import datetime
        import urllib3
        urllib3.disable_warnings()
        
        def get_sunat():
            try:
                print("Obteniendo SUNAT...")
                
                # Crear sesion para mantener cookies
                session = requests.Session()
                session.headers.update({
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'application/json, text/javascript, */*; q=0.01',
                    'Accept-Language': 'es-PE,es;q=0.9',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Referer': 'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias'
                })
                
                # Primero obtener la pagina principal para cookies
                main_response = session.get(
                    'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias',
                    verify=False,
                    timeout=30
                )
                print(f"Main page status: {main_response.status_code}")
                
                # Intentar el endpoint AJAX que descubriste
                mes = datetime.now().month
                anio = datetime.now().year
                
                # Probar diferentes endpoints
                endpoints = [
                    f'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias/listarTipoCambio?mes={mes}&anho={anio}',
                    'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias/listarTipoCambio',
                    f'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias?mes={mes:02d}&anho={anio}',
                    'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias'
                ]
                
                for endpoint in endpoints:
                    print(f"Probando: {endpoint}")
                    
                    try:
                        response = session.get(endpoint, verify=False, timeout=15)
                        
                        if response.status_code == 200:
                            content = response.text
                            
                            # Si es JSON
                            try:
                                data = json.loads(content)
                                print(f"JSON recibido: {data}")
                                
                                # Buscar valores en el JSON
                                if isinstance(data, list):
                                    for item in data:
                                        if 'compra' in item and 'venta' in item:
                                            return {
                                                "compra": float(item['compra']),
                                                "venta": float(item['venta']),
                                                "fecha": datetime.now().strftime("%d/%m/%Y"),
                                                "fuente": "ajax_endpoint"
                                            }
                            except:
                                pass
                            
                            # Si es HTML, buscar el calendario
                            if '<' in content:
                                soup = BeautifulSoup(content, 'html.parser')
                                
                                # Buscar el dia actual en el calendario
                                dia = datetime.now().day
                                
                                # Buscar por clase calendario-dia-tc
                                dias_tc = soup.find_all(class_='calendario-dia-tc')
                                for dia_tc in dias_tc:
                                    if str(dia) in dia_tc.get_text():
                                        # Buscar valores de compra y venta
                                        parent = dia_tc.parent
                                        text = parent.get_text()
                                        
                                        compra_match = re.search(r'Compra\s*([0-9]+\.[0-9]+)', text)
                                        venta_match = re.search(r'Venta\s*([0-9]+\.[0-9]+)', text)
                                        
                                        if compra_match and venta_match:
                                            print(f"SUNAT calendario encontrado: {compra_match.group(1)}/{venta_match.group(1)}")
                                            return {
                                                "compra": float(compra_match.group(1)),
                                                "venta": float(venta_match.group(1)),
                                                "fecha": f"{dia:02d}/{mes:02d}/{anio}",
                                                "fuente": "calendario_html"
                                            }
                                
                                # Buscar tabla con clase form-table
                                tabla = soup.find('table', class_='form-table')
                                if tabla:
                                    filas = tabla.find_all('tr')
                                    for fila in filas:
                                        celdas = fila.find_all('td')
                                        for i, celda in enumerate(celdas):
                                            if str(dia) in celda.get_text():
                                                # La siguiente celda tiene los valores
                                                if i + 1 < len(celdas):
                                                    valores_text = celdas[i + 1].get_text()
                                                    numeros = re.findall(r'([0-9]+\.[0-9]+)', valores_text)
                                                    
                                                    if len(numeros) >= 2:
                                                        print(f"SUNAT tabla encontrado: {numeros[0]}/{numeros[1]}")
                                                        return {
                                                            "compra": float(numeros[0]),
                                                            "venta": float(numeros[1]),
                                                            "fecha": f"{dia:02d}/{mes:02d}/{anio}",
                                                            "fuente": "tabla_html"
                                                        }
                                
                                # Buscar cualquier valor 3.XXX en el HTML
                                valores = re.findall(r'3\.\d{3}', content)
                                if valores:
                                    valores_unicos = list(dict.fromkeys(valores))
                                    valores_float = [float(v) for v in valores_unicos if 3.4 <= float(v) <= 3.8]
                                    
                                    if valores_float:
                                        if len(valores_float) >= 2:
                                            compra = min(valores_float[0], valores_float[1])
                                            venta = max(valores_float[0], valores_float[1])
                                        else:
                                            compra = venta = valores_float[0]
                                        
                                        print(f"SUNAT valores encontrados: {compra}/{venta}")
                                        return {
                                            "compra": compra,
                                            "venta": venta,
                                            "fecha": datetime.now().strftime("%d/%m/%Y"),
                                            "fuente": "regex_html"
                                        }
                    
                    except Exception as e:
                        print(f"Error en endpoint {endpoint}: {e}")
                        continue
                
                # Si nada funciono, intentar el PDF
                try:
                    print("Intentando obtener del PDF...")
                    pdf_url = 'https://e-consulta.sunat.gob.pe/cl-at-ittipcam/tcS01Alias/generarPdf'
                    pdf_response = session.get(pdf_url, verify=False, timeout=15)
                    
                    if pdf_response.status_code == 200:
                        # El PDF puede tener los datos en texto
                        pdf_text = str(pdf_response.content)
                        valores = re.findall(r'3\.\d{3}', pdf_text)
                        
                        if valores:
                            print(f"Valores del PDF: {valores}")
                            valores_float = [float(v) for v in valores if 3.4 <= float(v) <= 3.8]
                            
                            if valores_float:
                                return {
                                    "compra": valores_float[0],
                                    "venta": valores_float[1] if len(valores_float) > 1 else valores_float[0],
                                    "fecha": datetime.now().strftime("%d/%m/%Y"),
                                    "fuente": "pdf"
                                }
                except:
                    pass
                    
            except Exception as e:
                print(f"Error general SUNAT: {e}")
                import traceback
                traceback.print_exc()
            
            return {"error": True, "message": "No se pudo obtener de SUNAT"}
        
        def get_sbs():
            try:
                print("Obteniendo SBS...")
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                
                response = requests.get(
                    'https://www.sbs.gob.pe/app/pp/sistip_portal/paginas/publicacion/tipocambiopromedio.aspx',
                    headers=headers,
                    verify=False,
                    timeout=30
                )
                
                if response.status_code == 200:
                    html = response.text
                    
                    # Buscar valores 3.XXX
                    valores = re.findall(r'3\.\d{3}', html)
                    
                    if valores:
                        valores_float = [float(v) for v in valores if 3.4 <= float(v) <= 3.8]
                        valores_unicos = list(dict.fromkeys(valores_float))
                        
                        if len(valores_unicos) >= 2:
                            print(f"SBS encontrado: {valores_unicos[0]}/{valores_unicos[1]}")
                            return {
                                "compra": valores_unicos[0],
                                "venta": valores_unicos[1],
                                "fecha": datetime.now().strftime("%d/%m/%Y"),
                                "fuente": "web_scraping"
                            }
                        elif len(valores_unicos) == 1:
                            val = valores_unicos[0]
                            print(f"SBS un valor: {val}")
                            return {
                                "compra": val,
                                "venta": val,
                                "fecha": datetime.now().strftime("%d/%m/%Y"),
                                "fuente": "web_scraping"
                            }
                    
            except Exception as e:
                print(f"Error SBS: {e}")
            
            return {"error": True, "message": "No se pudo obtener de SBS"}
        
        print("=" * 60)
        print("INICIANDO SCRAPING CON ENDPOINTS CORRECTOS")
        print("=" * 60)
        
        sunat_data = get_sunat()
        sbs_data = get_sbs()
        
        result = {
            "sunat": sunat_data,
            "sbs": sbs_data,
            "ultima_actualizacion": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        with open('tipo-cambio.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print("\n" + "=" * 60)
        print("RESULTADO:")
        print(f"SUNAT: {sunat_data}")
        print(f"SBS: {sbs_data}")
        print("=" * 60)
        ENDOFSCRIPT
        
        python scraper.py
    
    - name: Mostrar JSON
      run: cat tipo-cambio.json
    
    - name: Commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add tipo-cambio.json
        git commit -m "TC - $(date +'%d/%m/%Y %H:%M')" || echo "No changes"
        git push || echo "Nothing to push"
